{"version":3,"sources":["firebase/base.js","Chat.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Chat","props","logout","bind","state","username","message","email","user","alert","messages","auth","currentUser","socket","io","sendMessage","ev","preventDefault","emit","author","setState","on","data","addMessage","console","log","signOut","className","onClick","this","map","onSubmit","required","type","placeholder","value","onChange","target","React","Component","Login","login","handleChange","signup","password","e","signInWithEmailAndPassword","then","u","catch","error","createUserWithEmailAndPassword","name","for","id","aria-describedby","style","marginLeft","App","authListener","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b75a5926.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyC3yJOwbZku74gAJF3et_MMp7dO4pixuRI\",\r\n    authDomain: \"chit-chat-e4669.firebaseapp.com\",\r\n    databaseURL: \"https://chit-chat-e4669.firebaseio.com\",\r\n    projectId: \"chit-chat-e4669\",\r\n    storageBucket: \"chit-chat-e4669.appspot.com\",\r\n    messagingSenderId: \"934941408435\",\r\n    appId: \"1:934941408435:web:2605431cffec7ab78704c6\",\r\n    measurementId: \"G-S0WV3PYYXY\"\r\n  };\r\n\r\n  const fire = firebase.initializeApp(firebaseConfig)\r\n\r\n  export default fire;\r\n","import React from 'react';\r\nimport io from 'socket.io-client';\r\nimport fire from './firebase/base';\r\n\r\nclass Chat extends React.Component {\r\n  \r\nconstructor(props){\r\n  \r\n    super(props);\r\n    this.logout = this.logout.bind(this);\r\n     this.state = {\r\n        username: \"\",\r\n        message: \"\",\r\n        email: this.user,\r\n        alert: \"\",\r\n        messages: []\r\n     };\r\n\r\n     var user = fire.auth().currentUser;\r\n    \r\n     if (user != null) {\r\n       this.state.email = user.email;\r\n     }\r\n\r\n     this.socket = io('chit-chat-e4669.firebaseapp.com');\r\n     \r\n  this.sendMessage = ev => {\r\n    \r\n    ev.preventDefault();\r\n    this.socket.emit('SEND_MESSAGE', {\r\n     \r\n        author: this.state.email,\r\n        message: this.state.message,\r\n        \r\n    });\r\n    this.setState({message: ''});\r\n   }\r\n\r\n\r\n    this.socket.on('RECEIVE_MESSAGE', function(data){\r\n        addMessage(data);\r\n    });\r\n\r\n    const addMessage = data => {\r\n  \r\n        console.log(data);\r\n        this.setState({messages: [...this.state.messages, data]});\r\n        console.log(this.state.messages);\r\n      }\r\n \r\n\r\n      \r\n}\r\n\r\nlogout() {\r\n  fire.auth().signOut();\r\n}\r\n\r\n    render() {\r\n      return(\r\n<div className=\"container\">\r\n  <div className=\"row\">\r\n    <div className=\"col\">\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"card-title\">Chit Chat</div>\r\n          <button onClick={this.logout} className=\"btn btn-danger logout-button\">Çıkış Yap</button>\r\n          <hr/>\r\n\r\n          <div className=\"messages\">\r\n        {this.state.messages.map(message => {\r\n            return (\r\n        <div>{message.author}: {message.message}</div>\r\n            )\r\n        })}\r\n           </div>\r\n         </div>\r\n\r\n        <form onSubmit={this.sendMessage} className=\"card-footer\">\r\n           \r\n           <input required type=\"text\" placeholder=\"Mesaj\" value={this.state.message} onChange={ev => this.setState({message: ev.target.value})} className=\"form-control\"/>\r\n           <br/>\r\n           <button className=\"btn btn-primary form-control\">Gönder</button>\r\n        </form>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n      )\r\n    }\r\n}\r\n\r\nexport default Chat;","import React, { Component, useState } from 'react';\r\nimport fire from './firebase/base';\r\n\r\n\r\nclass Login extends Component {\r\nconstructor(props){\r\n  super(props);\r\n  this.login = this.login.bind(this);\r\n  this.handleChange = this.handleChange.bind(this);\r\n  this.signup = this.signup.bind(this);\r\n  this.state = {\r\n    email:'',\r\n    password:''\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nlogin(e) {\r\n  e.preventDefault();\r\n  fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n  }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n}\r\n\r\n\r\nsignup(e){\r\n  e.preventDefault();\r\n  fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\r\n  }).then((u)=>{console.log(u)})\r\n  .catch((error) => {\r\n      console.log(error);\r\n    })\r\n}\r\n\r\nhandleChange(e) {\r\n\r\n  this.setState({ [e.target.name]: e.target.value });\r\n}\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n    <div>\r\n     <div className=\"col-md-6\">\r\n    <form>\r\n      <div className=\"form-group\">\r\n       <label for=\"exampleInputEmail1\">Email adresi</label>\r\n       <input required value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\r\n       <small id=\"emailHelp\" className=\"form-text text-muted\">Email adresinizi başkalarıyla asla paylaşmayacağız.</small>\r\n      </div>\r\n       <div className=\"form-group\">\r\n      <label for=\"exampleInputPassword1\">Şifre</label>\r\n      <input required value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" className=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Şifre\" />\r\n      </div>\r\n      <button type=\"submit\" onClick={this.login} className=\"btn btn-primary\">Giriş Yap</button>\r\n      <button type=\"submit\" onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-success form-control\">Kaydol</button>\r\n    </form>\r\n \r\n </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n\r\n   \r\n\r\n\r\n    \r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport Chat from \"./Chat\"\nimport Login from \"./Login\"\nimport fire from './firebase/base';\n\n\n\nclass App extends Component {\nconstructor(props){\n  super(props);\n  this.state = {\n      user: {}\n  };\n  this.authListener = this.authListener.bind(this);\n}\n\ncomponentDidMount(){\n  this.authListener();\n}\n    \n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n    console.log(user);\n      if (user) {\n        this.setState({ user });\n      // localStorage.setItem('user', user.uid);\n      } else {\n        this.setState({ user: null });\n      //  localStorage.removeItem('user');\n      }\n    });\n  }\n  render() {\n    return (\n  <div>{this.state.user ? ( <Chat />) : (<Login/> )}</div>  \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}